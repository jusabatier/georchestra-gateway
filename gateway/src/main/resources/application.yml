# Spring-boot/cloud application configuration. Imports georchestra specific config files from
# - classpath:gateway.yml
# - optional:${georchestra.datadir}/default.properties
# - optional:${georchestra.datadir}/gateway/gateway.yaml
# in that order of precedence
info:
  component: Gateway Server
  instance-id: ${spring.application.name}:${spring.application.instance_id:${spring.cloud.client.ip-address}}:${server.port}
server:
  port: 8080
  compression.enabled: true
  # HTTP/2 is only supported over TLS (HTTPS)
  # So we need to configure SSL if we want to support HTTP/2
  http2.enabled: ${server.ssl.enabled}
  ssl:
    enabled: false
    #TODO: configure SSL with a self-signed certificate

spring:
  config:
    # See https://github.com/georchestra/datadir/tree/master/gateway for a configuration override example
    import: optional:file:${georchestra.datadir}/default.properties,optional:file:${georchestra.datadir}/gateway/gateway.yaml
  main:
    banner-mode: off
    web-application-type: reactive
  application.name: gateway-service
  thymeleaf:
    cache: false
  autoconfigure:
    exclude:
    - org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration
    - org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration
  cloud:
    gateway:
      enabled: true
      global-filter.websocket-routing.enabled: true
      metrics.enabled: true
      # Uncomment the following to allow cross-origin requests from any methods
      # coming from anywhere.
      # See https://docs.spring.io/spring-cloud-gateway/reference/spring-cloud-gateway/cors-configuration.html
      # for more infos.
      #globalcors:
      #  cors-configurations:
      #    '[/**]':
      #      allowedOrigins: "*"
      #      allowedHeaders: "*"
      #      allowedMethods: "*"

      default-filters:
      - SecureHeaders
      - TokenRelay
      - RemoveSecurityHeaders
      # AddSecHeaders appends sec-* headers to proxied requests based on the currently authenticated user
      - AddSecHeaders
      global-filter:
        websocket-routing:
          enabled: true
      filter:
        secure-headers:
          enabled: true
          disable:
          - content-security-policy
          frame-options: SAMEORIGIN
          xss-protection-header: 0
          referrer-policy: no-referrer
          #content-security-policy: script-src 'self' 'unsafe-eval'; object-src 'self';
      #routes: ought to be loaded from gateway.yaml, preferrably from georchestra's datadir

georchestra:
  gateway:
    security:
      create-non-existing-users-in-l-d-a-p: false
      defaultOrganization: ${defaultOrganization:}
      header-authentication:
        enabled: false
      events:
        rabbitmq:
          # Note usually enableRabbitmqEvents, rabbitmqHost, etc. come from georchestra's default.properties
          enabled: ${enableRabbitmqEvents:false}
          host: ${rabbitmqHost}
          port: ${rabbitmqPort}
          user: ${rabbitmqUser}
          password: ${rabbitmqPassword}
      oauth2:
        enabled: false
        proxy:
          enabled: false
          host: localhost
          port: 8000
          username: jack
          password: insecure
      ldap:
        # Multiple LDAP data sources are supported. The first key defines a simple
        # name for them. The `default` one here, disabled by default, is pre-configured
        # to use Georchestra's default OpenLDAP database.
        # You should usually just enable it in the georchestra datadir's gateway.yml
        # with georchestra.gateway.security.ldap.default.enabled: true
        default:
          enabled: false
          extended: true
          url: ${ldapScheme}://${ldapHost}:${ldapPort}
          baseDn: ${ldapBaseDn:dc=georchestra,dc=org}
          users:
            rdn: ${ldapUsersRdn:ou=users}
            searchFilter: ${ldapUserSearchFilter:(uid={0})}
            pendingUsersSearchBaseDN: ou=pendingusers
            protectedUsers: geoserver_privileged_user
          roles:
            rdn: ${ldapRolesRdn:ou=roles}
            searchFilter: ${ldapRolesSearchFilter:(member={0})}
            protectedRoles: ADMINISTRATOR, EXTRACTORAPP, GN_.*, ORGADMIN, REFERENT, USER, SUPERUSER
          orgs:
            rdn: ${ldapOrgsRdn:ou=orgs}
            orgTypes: Association,Company,NGO,Individual,Other
            pendingOrgSearchBaseDN: ou=pendingorgs

management:
  server:
    port: 8090
  info:
    build.enabled: true
    java.enabled: true
    env.enabled: true
    git:
      enabled: true
      mode: simple
  endpoints:
    enabled-by-default: true
    web.exposure.include: "*"
  endpoint:
    info.enabled: true
    metrics.enabled: true
    shutdown.enabled: true
    health:
      enabled: true
      probes.enabled: true
      show-details: always
  metrics:
    binders:
      processor.enabled: true
      uptime.enabled: true
      jvm.enabled: true
    enable.all: true
    enable.jvm: true
    export:
      atlas.enabled: false

logging:
  level:
    root: warn
    '[reactor.netty.http ]': warn
    '[reactor.netty.http.server.logging.AccessLog]': warn
    '[reactor.netty.http.client]': warn
    '[org.springframework]': info
    '[org.springframework.cloud.gateway]': info
    '[org.springframework.security]': info
    '[org.springframework.security.oauth2]': debug
    '[reactor.netty.http ]': debug
    '[org.georchestra.gateway]': info
    '[org.georchestra.gateway.accesslog]': info
    '[org.georchestra.gateway.filter.headers]': debug
    '[org.georchestra.gateway.config.security]': debug
    '[org.georchestra.gateway.config.security.accessrules]': debug
    '[org.georchestra.gateway.security.ldap]': debug
    '[org.georchestra.gateway.security.oauth2]': debug
    '[org.georchestra.gateway.events]': debug

---
spring.config.activate.on-profile: dev
spring.config.import: file:../datadir/default.properties,file:../datadir/gateway/gateway.yaml,file:../datadir/gateway/security.yaml
